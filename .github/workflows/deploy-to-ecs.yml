name: Deploy to Amazon ECS

# Trigger the workflow on push to main branch
on:
  workflow_dispatch:

# Environment variables used throughout the workflow
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}  # Set this to your AWS region
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}        # Set this to your ECR repository name
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}   # Set this to your ECS service name
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}        # Set this to your ECS cluster name
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }} # Path to your task definition file
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}   # Container name in your task definition

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        # Option 1: Using access keys (less secure)
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
        # Option 2: Using OIDC (more secure)
        # role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        # aws-region: ${{ env.AWS_REGION }}

    # Step 3: Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 4: Build, tag, and push image to Amazon ECR
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # Use commit SHA as unique tag instead of 'latest'
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Store the image URI for later use
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
        # Optional: Print image details for debugging
        echo "Built and pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # Step 6: Update the ECS task definition with the new image
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    # Step 7: Print the updated task definition for debugging
    - name: Print updated task definition
      run: |
        cat ${{ steps.task-def.outputs.task-definition }}

    # Step 8: Deploy the updated task definition to ECS
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        force-new-deployment: true

